Terminals which are not used

   '|'
   '&'
   UMINUS


State 71 conflicts: 13 shift/reduce
State 80 conflicts: 1 shift/reduce
State 81 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: scope

    2 scope: '{' declarations statements '}'

    3 declarations: declarations declaration
    4             | /* empty */

    5 statements: statements statement
    6           | /* empty */

    7 declaration: type ID ';'
    8            | type ID '=' expression ';'
    9            | CONST type ID '=' expression

   10 statement: variable '=' expression ';'
   11          | IF '(' expression ')' statement else_statement
   12          | WHILE '(' expression ')' statement
   13          | scope
   14          | ';'

   15 else_statement: ELSE statement
   16               | /* empty */

   17 type: INT_T
   18     | IVEC_T
   19     | BOOL_T
   20     | BVEC_T
   21     | FLOAT_T
   22     | VEC_T

   23 expression: constructor
   24           | function
   25           | INT_C
   26           | FLOAT_C
   27           | variable
   28           | unary_op expression
   29           | expression binary_op expression
   30           | TRUE_C
   31           | FALSE_C
   32           | '(' expression ')'

   33 variable: ID
   34         | ID '[' INT_C ']'

   35 unary_op: '!'
   36         | '-'

   37 binary_op: AND
   38          | OR
   39          | EQ
   40          | NEQ
   41          | '<'
   42          | LEQ
   43          | '>'
   44          | GEQ
   45          | '+'
   46          | '-'
   47          | '*'
   48          | '/'
   49          | '^'

   50 constructor: type '(' arguments ')'

   51 function: function_name '(' arguments_opt ')'

   52 function_name: FUNC

   53 arguments_opt: arguments
   54              | /* empty */

   55 arguments: arguments ',' expression
   56          | expression


Terminals, with rules where they appear

$end (0) 0
'!' (33) 35
'&' (38)
'(' (40) 11 12 32 50 51
')' (41) 11 12 32 50 51
'*' (42) 47
'+' (43) 45
',' (44) 55
'-' (45) 36 46
'/' (47) 48
';' (59) 7 8 10 14
'<' (60) 41
'=' (61) 8 9 10
'>' (62) 43
'[' (91) 34
']' (93) 34
'^' (94) 49
'{' (123) 2
'|' (124)
'}' (125) 2
error (256)
FLOAT_T (258) 21
INT_T (259) 17
BOOL_T (260) 19
CONST (261) 9
FALSE_C (262) 31
TRUE_C (263) 30
FUNC (264) 52
IF (265) 11
WHILE (266) 12
ELSE (267) 15
AND (268) 37
OR (269) 38
NEQ (270) 40
EQ (271) 39
LEQ (272) 42
GEQ (273) 44
VEC_T (274) 22
BVEC_T (275) 20
IVEC_T (276) 18
FLOAT_C (277) 26
INT_C (278) 25 34
ID (279) 7 8 9 33 34
UMINUS (280)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
scope (47)
    on left: 2, on right: 1 13
declarations (48)
    on left: 3 4, on right: 2 3
statements (49)
    on left: 5 6, on right: 2 5
declaration (50)
    on left: 7 8 9, on right: 3
statement (51)
    on left: 10 11 12 13 14, on right: 5 11 12 15
else_statement (52)
    on left: 15 16, on right: 11
type (53)
    on left: 17 18 19 20 21 22, on right: 7 8 9 50
expression (54)
    on left: 23 24 25 26 27 28 29 30 31 32, on right: 8 9 10 11 12
    28 29 32 55 56
variable (55)
    on left: 33 34, on right: 10 27
unary_op (56)
    on left: 35 36, on right: 28
binary_op (57)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49,
    on right: 29
constructor (58)
    on left: 50, on right: 23
function (59)
    on left: 51, on right: 24
function_name (60)
    on left: 52, on right: 51
arguments_opt (61)
    on left: 53 54, on right: 51
arguments (62)
    on left: 55 56, on right: 50 53 55


state 0

    0 $accept: . program $end

    '{'  shift, and go to state 1

    program  go to state 2
    scope    go to state 3


state 1

    2 scope: '{' . declarations statements '}'

    $default  reduce using rule 4 (declarations)

    declarations  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: scope .

    $default  reduce using rule 1 (program)


state 4

    2 scope: '{' declarations . statements '}'
    3 declarations: declarations . declaration

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    CONST    shift, and go to state 9
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    $default  reduce using rule 6 (statements)

    statements   go to state 13
    declaration  go to state 14
    type         go to state 15


state 5

    0 $accept: program $end .

    $default  accept


state 6

   21 type: FLOAT_T .

    $default  reduce using rule 21 (type)


state 7

   17 type: INT_T .

    $default  reduce using rule 17 (type)


state 8

   19 type: BOOL_T .

    $default  reduce using rule 19 (type)


state 9

    9 declaration: CONST . type ID '=' expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    type  go to state 16


state 10

   22 type: VEC_T .

    $default  reduce using rule 22 (type)


state 11

   20 type: BVEC_T .

    $default  reduce using rule 20 (type)


state 12

   18 type: IVEC_T .

    $default  reduce using rule 18 (type)


state 13

    2 scope: '{' declarations statements . '}'
    5 statements: statements . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    '}'    shift, and go to state 20
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 23
    variable   go to state 24


state 14

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


state 15

    7 declaration: type . ID ';'
    8            | type . ID '=' expression ';'

    ID  shift, and go to state 25


state 16

    9 declaration: CONST type . ID '=' expression

    ID  shift, and go to state 26


state 17

   11 statement: IF . '(' expression ')' statement else_statement

    '('  shift, and go to state 27


state 18

   12 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 28


state 19

   33 variable: ID .
   34         | ID . '[' INT_C ']'

    '['  shift, and go to state 29

    $default  reduce using rule 33 (variable)


state 20

    2 scope: '{' declarations statements '}' .

    $default  reduce using rule 2 (scope)


state 21

   14 statement: ';' .

    $default  reduce using rule 14 (statement)


state 22

   13 statement: scope .

    $default  reduce using rule 13 (statement)


state 23

    5 statements: statements statement .

    $default  reduce using rule 5 (statements)


state 24

   10 statement: variable . '=' expression ';'

    '='  shift, and go to state 30


state 25

    7 declaration: type ID . ';'
    8            | type ID . '=' expression ';'

    '='  shift, and go to state 31
    ';'  shift, and go to state 32


state 26

    9 declaration: CONST type ID . '=' expression

    '='  shift, and go to state 33


state 27

   11 statement: IF '(' . expression ')' statement else_statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 43
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 28

   12 statement: WHILE '(' . expression ')' statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 49
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 29

   34 variable: ID '[' . INT_C ']'

    INT_C  shift, and go to state 50


state 30

   10 statement: variable '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 51
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 31

    8 declaration: type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 52
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 32

    7 declaration: type ID ';' .

    $default  reduce using rule 7 (declaration)


state 33

    9 declaration: CONST type ID '=' . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 53
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 34

   31 expression: FALSE_C .

    $default  reduce using rule 31 (expression)


state 35

   30 expression: TRUE_C .

    $default  reduce using rule 30 (expression)


state 36

   52 function_name: FUNC .

    $default  reduce using rule 52 (function_name)


state 37

   26 expression: FLOAT_C .

    $default  reduce using rule 26 (expression)


state 38

   25 expression: INT_C .

    $default  reduce using rule 25 (expression)


state 39

   36 unary_op: '-' .

    $default  reduce using rule 36 (unary_op)


state 40

   35 unary_op: '!' .

    $default  reduce using rule 35 (unary_op)


state 41

   32 expression: '(' . expression ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 54
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 42

   50 constructor: type . '(' arguments ')'

    '('  shift, and go to state 55


state 43

   11 statement: IF '(' expression . ')' statement else_statement
   29 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 69

    binary_op  go to state 70


state 44

   27 expression: variable .

    $default  reduce using rule 27 (expression)


state 45

   28 expression: unary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 71
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 46

   23 expression: constructor .

    $default  reduce using rule 23 (expression)


state 47

   24 expression: function .

    $default  reduce using rule 24 (expression)


state 48

   51 function: function_name . '(' arguments_opt ')'

    '('  shift, and go to state 72


state 49

   12 statement: WHILE '(' expression . ')' statement
   29 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 73

    binary_op  go to state 70


state 50

   34 variable: ID '[' INT_C . ']'

    ']'  shift, and go to state 74


state 51

   10 statement: variable '=' expression . ';'
   29 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 75

    binary_op  go to state 70


state 52

    8 declaration: type ID '=' expression . ';'
   29 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 76

    binary_op  go to state 70


state 53

    9 declaration: CONST type ID '=' expression .
   29 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 9 (declaration)

    binary_op  go to state 70


state 54

   29 expression: expression . binary_op expression
   32           | '(' expression . ')'

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 77

    binary_op  go to state 70


state 55

   50 constructor: type '(' . arguments ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 78
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48
    arguments      go to state 79


state 56

   37 binary_op: AND .

    $default  reduce using rule 37 (binary_op)


state 57

   38 binary_op: OR .

    $default  reduce using rule 38 (binary_op)


state 58

   40 binary_op: NEQ .

    $default  reduce using rule 40 (binary_op)


state 59

   39 binary_op: EQ .

    $default  reduce using rule 39 (binary_op)


state 60

   42 binary_op: LEQ .

    $default  reduce using rule 42 (binary_op)


state 61

   44 binary_op: GEQ .

    $default  reduce using rule 44 (binary_op)


state 62

   41 binary_op: '<' .

    $default  reduce using rule 41 (binary_op)


state 63

   43 binary_op: '>' .

    $default  reduce using rule 43 (binary_op)


state 64

   45 binary_op: '+' .

    $default  reduce using rule 45 (binary_op)


state 65

   46 binary_op: '-' .

    $default  reduce using rule 46 (binary_op)


state 66

   47 binary_op: '*' .

    $default  reduce using rule 47 (binary_op)


state 67

   48 binary_op: '/' .

    $default  reduce using rule 48 (binary_op)


state 68

   49 binary_op: '^' .

    $default  reduce using rule 49 (binary_op)


state 69

   11 statement: IF '(' expression ')' . statement else_statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 80
    variable   go to state 24


state 70

   29 expression: expression binary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 81
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 71

   28 expression: unary_op expression .
   29           | expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    AND       [reduce using rule 28 (expression)]
    OR        [reduce using rule 28 (expression)]
    NEQ       [reduce using rule 28 (expression)]
    EQ        [reduce using rule 28 (expression)]
    LEQ       [reduce using rule 28 (expression)]
    GEQ       [reduce using rule 28 (expression)]
    '<'       [reduce using rule 28 (expression)]
    '>'       [reduce using rule 28 (expression)]
    '+'       [reduce using rule 28 (expression)]
    '-'       [reduce using rule 28 (expression)]
    '*'       [reduce using rule 28 (expression)]
    '/'       [reduce using rule 28 (expression)]
    '^'       [reduce using rule 28 (expression)]
    $default  reduce using rule 28 (expression)

    binary_op  go to state 70


state 72

   51 function: function_name '(' . arguments_opt ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    $default  reduce using rule 54 (arguments_opt)

    type           go to state 42
    expression     go to state 78
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48
    arguments_opt  go to state 82
    arguments      go to state 83


state 73

   12 statement: WHILE '(' expression ')' . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 84
    variable   go to state 24


state 74

   34 variable: ID '[' INT_C ']' .

    $default  reduce using rule 34 (variable)


state 75

   10 statement: variable '=' expression ';' .

    $default  reduce using rule 10 (statement)


state 76

    8 declaration: type ID '=' expression ';' .

    $default  reduce using rule 8 (declaration)


state 77

   32 expression: '(' expression ')' .

    $default  reduce using rule 32 (expression)


state 78

   29 expression: expression . binary_op expression
   56 arguments: expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 56 (arguments)

    binary_op  go to state 70


state 79

   50 constructor: type '(' arguments . ')'
   55 arguments: arguments . ',' expression

    ')'  shift, and go to state 85
    ','  shift, and go to state 86


state 80

   11 statement: IF '(' expression ')' statement . else_statement

    ELSE  shift, and go to state 87

    ELSE      [reduce using rule 16 (else_statement)]
    $default  reduce using rule 16 (else_statement)

    else_statement  go to state 88


state 81

   29 expression: expression . binary_op expression
   29           | expression binary_op expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    AND       [reduce using rule 29 (expression)]
    OR        [reduce using rule 29 (expression)]
    NEQ       [reduce using rule 29 (expression)]
    EQ        [reduce using rule 29 (expression)]
    LEQ       [reduce using rule 29 (expression)]
    GEQ       [reduce using rule 29 (expression)]
    '<'       [reduce using rule 29 (expression)]
    '>'       [reduce using rule 29 (expression)]
    '+'       [reduce using rule 29 (expression)]
    '-'       [reduce using rule 29 (expression)]
    '*'       [reduce using rule 29 (expression)]
    '/'       [reduce using rule 29 (expression)]
    '^'       [reduce using rule 29 (expression)]
    $default  reduce using rule 29 (expression)

    binary_op  go to state 70


state 82

   51 function: function_name '(' arguments_opt . ')'

    ')'  shift, and go to state 89


state 83

   53 arguments_opt: arguments .
   55 arguments: arguments . ',' expression

    ','  shift, and go to state 86

    $default  reduce using rule 53 (arguments_opt)


state 84

   12 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 12 (statement)


state 85

   50 constructor: type '(' arguments ')' .

    $default  reduce using rule 50 (constructor)


state 86

   55 arguments: arguments ',' . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 90
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 87

   15 else_statement: ELSE . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 91
    variable   go to state 24


state 88

   11 statement: IF '(' expression ')' statement else_statement .

    $default  reduce using rule 11 (statement)


state 89

   51 function: function_name '(' arguments_opt ')' .

    $default  reduce using rule 51 (function)


state 90

   29 expression: expression . binary_op expression
   55 arguments: arguments ',' expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 55 (arguments)

    binary_op  go to state 70


state 91

   15 else_statement: ELSE statement .

    $default  reduce using rule 15 (else_statement)
